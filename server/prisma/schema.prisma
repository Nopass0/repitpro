// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  //prod
  // provider = "postgresql"
  // url      = env("DATABASE_URL")

  //sqlite3 dev
  provider = "postgresql"
  url      = "postgresql://postgres:root@localhost:5432/repitpro"
}


//users and auth tokens
model User {
  id         String   @id @default(cuid())
  name       String   @unique
  password   String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  email      String?
  userId     String?
  address    String?
  phone      String?
  source     String?
  expenses   Float?
  comment    String?
  unpaidLessons Int?
  paidLessons Int?
  totalLessonsEarned Int?
  totalLessonsDebt Int?
  isArchived Boolean?
  isDeleted  Boolean?
  filesIds   String?
  linksIds   String?
}


model Token {
  id         String   @id @default(cuid())
  userId     String
  token      String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

// export interface ITimeLine {
//   day: string;
//   startTime: {
//     hour: number;
//     minute: number;
//   };
//   endTime: {
//     hour: number;
//     minute: number;
//   };
// }

model Group {
  id              String      @id @default(cuid())
  groupName       String
  items           Item[]
  students        Student[]
  userId          String
  isArchived       Boolean @default(false)
}

model TimeLine {
  id  String @id @default(cuid())
  day  String
  startTimeHour  Int
  startTimeMinute  Int
  endTimeHour  Int
  endTimeMinute  Int

  userId String
}

model Item {
  id         String   @id @default(cuid())
  itemName   String
  tryLessonCheck  Boolean
  tryLessonCost   String
  todayProgramStudent  String
  targetLesson  String
  programLesson  String
  typeLesson  Int
  placeLesson  String
  timeLesson  String
  valueMuiSelectArchive  Int
  startLesson  DateTime
  endLesson  DateTime
  nowLevel  Int?
  lessonDuration  Int?
  timeLinesArray Json //Objects

  group             Group?       @relation(fields: [groupId], references: [id])
  groupId           String?
  studentSchedules  StudentSchedule[]

  userId String
}

model Student {
  id              String   @id @default(cuid())
  nameStudent     String
  contactFace     String
  phoneNumber     String
  email           String
  address         String
  linkStudent     String
  costStudent     String
  commentStudent  String
  prePayCost      String
  prePayDate      DateTime?
  selectedDate    DateTime?
  storyLesson     String
  costOneLesson   String
  files           String[]
  targetLessonStudent String
  todayProgramStudent String
  isArchived      Boolean @default(false)
  group           Group    @relation(fields: [groupId], references: [id])
  groupId         String

  userId String
}

model StudentSchedule {
  id           String   @id @default(cuid())
  day          String
  groupId      String
  studentId    String?
  clientId     String?
  workCount    Int
  lessonsCount Int
  lessonsPrice Int
  workPrice    Int
  itemName     String?
  studentName  String?
  timeLinesArray  Json?
  typeLesson  Int?
  isChecked  Boolean?
  homeWork  String?
  classWork  String?
  address  String?
  homeFiles      String[]
  homeAudios     String[]
  classFiles      String[]
  classAudios     String[]
  homeStudentsPoints  Json? // [studentId: '', points: 0 (0-5)]
  isArchived  Boolean @default(false)
  classStudentsPoints  Json? // [studentId: '', points: 0 (0-5)]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  userId       String
  month        String
  year         String
  item         Item     @relation(fields: [itemId], references: [id])
  itemId       String
}